/*************************************************************
  Download latest ERa library here:
    https://github.com/eoh-jsc/era-lib/releases/latest
    https://www.arduino.cc/reference/en/libraries/era
    https://registry.platformio.org/libraries/eoh-ltd/ERa/installation

    ERa website:                https://e-ra.io
    ERa blog:                   https://iotasia.org
    ERa forum:                  https://forum.eoh.io
    Follow us:                  https://www.fb.com/EoHPlatform
 *************************************************************
  Dashboard setup:
    Virtual Pin setup:
        V0, type: number
        V1, type: string
        V2, type: number

    Button widget setup:
        Datastream: V0, V2
        Action on: the action of turning on V0, V2
        Action off: the action of turning off V0, V2

    Text Box widget setup:
        Datastream: V1
        Action: the action of V1
 *************************************************************/

// Enable debug console
// Set CORE_DEBUG_LEVEL = 3 first
#define ERA_DEBUG
// #define ERA_SERIAL Serial

/* Select ERa host location (VN: Viet Nam, SG: Singapore) */
#define ERA_LOCATION_VN
// #define ERA_LOCATION_SG

// You should get Auth Token in the ERa App or ERa Dashboard
#define ERA_AUTH_TOKEN "7562ec5d-3095-441f-b902-a2959bfa88d4"

#include <Arduino.h>
#include <ERa.hpp>

#define RXD2 16  // RX pin cho Serial2
#define TXD2 17  // TX pin cho Serial2

#define LED_PIN  2
#define SUOI     18
#define LOC     19
#define Quat     23
#define SWITCH_PIN_1  4
#define SWITCH_PIN_2  5
#define SWITCH_PIN_3  26
#define SWITCH_PIN_4  27

int toggleState_1 = 0; // Trạng thái của relay 1
int toggleState_2 = 0; // Trạng thái của relay 2
int toggleState_3 = 0; // Trạng thái của relay 3
int toggleState_4 = 0; // Trạng thái của relay 4
bool SwitchState_1 = LOW;
bool SwitchState_2 = LOW;
bool SwitchState_3 = LOW;
bool SwitchState_4 = LOW;

const char ssid[] = "Blue & Black";
const char pass[] = "khongcomang";

float nguong = 30.0;

/* This function is called every time the Virtual Pin 0 state change */
ERA_WRITE(V0) {
    /* Get value from Virtual Pin 0 and write LED */
    uint8_t value = param.getInt();
    digitalWrite(LED_PIN, value ? HIGH : LOW);
    toggleState_1 = value;

    // Send the LED status back
    ERa.virtualWrite(V0, digitalRead(LED_PIN));
    String dataToSend = "LED1:" + String(toggleState_1); // Chuyển đổi trạng thái thành chuỗi
    sendDataToLoRa(dataToSend); // Gọi hàm để gửi dữ liệu
}

ERA_WRITE(V2) {
    /* Get value from Virtual Pin 2 and write SUOI */
    uint8_t value = param.getInt();
    digitalWrite(SUOI, value ? HIGH : LOW);
    toggleState_2 = value;

    // Send the SUOI status back
    ERa.virtualWrite(V2, digitalRead(SUOI));
}

ERA_WRITE(V6) {
    /* Get value from Virtual Pin 2 and write SUOI */
    uint8_t value = param.getInt();
    digitalWrite(LOC, value ? HIGH : LOW);
    toggleState_3 = value;

    // Send the SUOI status back
    ERa.virtualWrite(V6, digitalRead(LOC));
}
ERA_WRITE(V9) {
    /* Get value from Virtual Pin 2 and write SUOI */
    uint8_t value = param.getInt();
    digitalWrite(Quat, value ? HIGH : LOW);
    toggleState_4 = value;

    // Send the SUOI status back
    ERa.virtualWrite(V9, digitalRead(Quat));
}

bool autoMode = false; // Biến để theo dõi trạng thái auto

ERA_WRITE(V8) {
    /* Nhận giá trị từ Virtual Pin 8 và cập nhật trạng thái auto */
    uint8_t value = param.getInt();
    autoMode = (value == 1); // Bật chế độ auto nếu nhận giá trị 1, tắt nếu nhận giá trị 0

    // Gửi lại trạng thái của auto mode
    ERa.virtualWrite(V8, autoMode);
}

/* This function will execute each time from the Text Box to your chip */
ERA_WRITE(V1) {
    /* Get value from Virtual Pin 1 */
    ERaString estr = param.getString();

    // If you type "on", turn on LED
    // If you type "off", turn off LED
    if (estr == "on") {
        digitalWrite(LED_PIN, HIGH);
        toggleState_1 = 1;
    }
    else if (estr == "off") {
        digitalWrite(LED_PIN, LOW);
        toggleState_1 = 0;
    }

    // Send it back
    ERa.virtualWrite(V1, estr);
    // Send the LED status back
    ERa.virtualWrite(V0, digitalRead(LED_PIN));
}

ERA_WRITE(V5) {
    /* Get value from Virtual Pin 1 */
    ERaString estr = param.getString();

    // If you type "on", turn on LED
    // If you type "off", turn off LED
    nguong = estr.toFloat();
    
    // Send it back
    ERa.virtualWrite(V5, estr);

}

/* This function will run every time ERa is connected */
ERA_CONNECTED() {
    ERA_LOG("ERa", "ERa connected!");
}

/* This function will run every time ERa is disconnected */
ERA_DISCONNECTED() {
    ERA_LOG("ERa", "ERa disconnected!");
}

/* This function send uptime every second to Virtual Pin 1 */
void timerEvent() {
    ERa.virtualWrite(V1, ERaMillis() / 1000L);
    ERA_LOG("Timer", "Uptime: %d", ERaMillis() / 1000L);
}

void manualControl() {
    // Manual control for LED
    if (digitalRead(SWITCH_PIN_1) == LOW && SwitchState_1 == LOW) {
        digitalWrite(LED_PIN, HIGH);
        toggleState_1 = 1;
        SwitchState_1 = HIGH;
        ERa.virtualWrite(V0, toggleState_1);
        String dataToSend = "LED1:" + String(toggleState_1); // Chuyển đổi trạng thái thành chuỗi
        sendDataToLoRa(dataToSend); // Gọi hàm để gửi dữ liệu
    }                                                            
    if (digitalRead(SWITCH_PIN_1) == HIGH && SwitchState_1 == HIGH) {
        digitalWrite(LED_PIN, LOW);
        toggleState_1 = 0;
        SwitchState_1 = LOW;
        ERa.virtualWrite(V0, toggleState_1);
        String dataToSend = "LED1:" + String(toggleState_1); // Chuyển đổi trạng thái thành chuỗi
        sendDataToLoRa(dataToSend); // Gọi hàm để gửi dữ liệu
    }
    // Manual control for SUOI
    if (digitalRead(SWITCH_PIN_2) == LOW && SwitchState_2 == LOW) {
        digitalWrite(SUOI, HIGH);
        toggleState_2 = 1;
        SwitchState_2 = HIGH;
        ERa.virtualWrite(V2, toggleState_2);
    }
    if (digitalRead(SWITCH_PIN_2) == HIGH && SwitchState_2 == HIGH) {
        digitalWrite(SUOI, LOW);
        toggleState_2 = 0;
        SwitchState_2 = LOW;
        ERa.virtualWrite(V2, toggleState_2);
    }
    // Manual control for LOC
    if (digitalRead(SWITCH_PIN_3) == LOW && SwitchState_3 == LOW) {
        digitalWrite(LOC, HIGH);
        toggleState_3 = 1;
        SwitchState_3 = HIGH;
        ERa.virtualWrite(V6, toggleState_3);
    }
    if (digitalRead(SWITCH_PIN_3) == HIGH && SwitchState_3 == HIGH) {
        digitalWrite(LOC, LOW);
        toggleState_3 = 0;
        SwitchState_3 = LOW;
        ERa.virtualWrite(V6, toggleState_3);
    }
    // Manual control for Quat
    if (digitalRead(SWITCH_PIN_4) == LOW && SwitchState_4 == LOW) {
        digitalWrite(Quat, HIGH);
        toggleState_4 = 1;
        SwitchState_4 = HIGH;
        ERa.virtualWrite(V9, toggleState_4);
    }
    if (digitalRead(SWITCH_PIN_4) == HIGH && SwitchState_4 == HIGH) {
        digitalWrite(Quat, LOW);
        toggleState_4 = 0;
        SwitchState_4 = LOW;
        ERa.virtualWrite(V9, toggleState_4);
    }
}

void setup() {
    /* Setup debug console */
#if defined(ERA_DEBUG)
    Serial.begin(9600);
#endif
    Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2); // Khởi tạo Serial2 cho LoRa
    /* Setup pin mode led pin */
    pinMode(LED_PIN, OUTPUT);
    pinMode(SUOI, OUTPUT);
    pinMode(LOC, OUTPUT);
    pinMode(Quat, OUTPUT);
    pinMode(SWITCH_PIN_1, INPUT_PULLUP);
    pinMode(SWITCH_PIN_2, INPUT_PULLUP);
    pinMode(SWITCH_PIN_3, INPUT_PULLUP);
    pinMode(SWITCH_PIN_4, INPUT_PULLUP);
   
    /* Set board id */
    // ERa.setBoardID("Board_1");

    /* Set scan WiFi. If activated, the board will scan
       and connect to the best quality WiFi. */
    ERa.setScanWiFi(true);

    /* Initializing the ERa library. */
    ERa.begin(ssid, pass);

    /* Setup timer called function every second */
    ERa.addInterval(1000L, timerEvent);
}

void receiveDataFromLoRa() {
  if (Serial2.available() > 0) {
    String input = Serial2.readString(); // Đọc dữ liệu từ LoRa
    Serial.print("Nhận dữ liệu từ LoRa: "); 
    Serial.println(input); // In dữ liệu nhận được

    // Tách giá trị nhiệt độ và độ ẩm
    int tempIndex = input.indexOf("Temp:") + 6; // Vị trí bắt đầu của giá trị nhiệt độ
    int humIndex = input.indexOf(", Hum:"); // Vị trí của dấu phẩy trước độ ẩm

    if (tempIndex > 0 && humIndex > tempIndex) {
      String tempValue = input.substring(tempIndex, humIndex); // Giá trị nhiệt độ
      String humValue = input.substring(humIndex + 6, humIndex + 11); // Giá trị độ ẩm

      // Loại bỏ khoảng trắng thừa
      tempValue.trim();
      humValue.trim();

      // In nhiệt độ và độ ẩm lên Serial Monitor
      Serial.print("Nhiệt độ: ");
      Serial.println(tempValue);
      ERa.virtualWrite(V10, tempValue.toInt());
      Serial.print("Độ ẩm: ");
      Serial.println(humValue);
      ERa.virtualWrite(V11, humValue.toInt());
    }
  }
}

void sendDataToLoRa(String data) {
  Serial2.println(data); // Gửi chuỗi dữ liệu qua Serial2 tới LoRa
  Serial.print("Gửi dữ liệu qua LoRa: ");
  Serial.println(data); // In dữ liệu được gửi để kiểm tra
}

void loop() {
    ERa.run();
    manualControl(); // Manual switch control
    receiveDataFromLoRa();
}
