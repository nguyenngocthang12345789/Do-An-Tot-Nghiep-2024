#include <WiFi.h>
#include <PubSubClient.h>

#define M0 12
#define M1 13
#define RXD2 16  // RX pin cho Serial2
#define TXD2 17  // TX pin cho Serial2

// Định nghĩa chân cho 4 nút nhấn
const int buttonPins[4] = {23, 25, 26, 27}; // Các chân nút nhấn không liên tục

// Định nghĩa chân cho 4 LED
const int ledPins[4] = {32, 33, 18, 19}; // Các chân LED không liên tục

const char* ssid = "Minh Ha Khach Hang";
const char* password = "tantamkhachhang";
const char* mqtt_server = "192.168.0.119";

WiFiClient espClient;
PubSubClient client(espClient);

// Biến lưu trữ trạng thái nút nhấn trước đó
bool lastButtonState[4] = {HIGH, HIGH, HIGH, HIGH};
// Biến lưu trữ trạng thái LED
bool ledState[4] = {false, false, false, false};

void setup() {
  Serial.begin(9600);
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2); // Khởi tạo Serial2 cho LoRa

  // Cấu hình chân cho LoRa E32
  pinMode(M0, OUTPUT);        
  pinMode(M1, OUTPUT);
  digitalWrite(M0, LOW); // Set M0 và M1 xuống LOW để hoạt động ở chế độ Normal
  digitalWrite(M1, LOW);

  // Khởi tạo chân cho nút nhấn
  for (int i = 0; i < 4; i++) {
    pinMode(buttonPins[i], INPUT_PULLUP);
  }

  // Khởi tạo chân cho LED
  for (int i = 0; i < 4; i++) {
    pinMode(ledPins[i], OUTPUT);
    digitalWrite(ledPins[i], LOW); // Đặt tất cả các LED ở trạng thái OFF
  }

  setup_wifi();
  client.setServer(mqtt_server, 1883);
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Đang kết nối với ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("Đã kết nối Wi-Fi");
  Serial.println("Địa chỉ IP: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Đang cố gắng kết nối lại MQTT...");
    if (client.connect("ESP32Client")) {
      Serial.println("đã kết nối");
    } else {
      Serial.print("thất bại, rc=");
      Serial.print(client.state());
      Serial.println(" thử lại sau 5 giây");
      delay(5000);
    }
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Nhận dữ liệu từ LoRa
  receiveDataFromLoRa();

  // Kiểm tra trạng thái nút nhấn
  checkButtonState();

  delay(500); // Đợi một thời gian trước khi đọc lại
}

// Hàm kiểm tra trạng thái nút nhấn
void checkButtonState() {
  for (int i = 0; i < 4; i++) {
    bool currentState = digitalRead(buttonPins[i]); // Đọc trạng thái nút nhấn từ mảng

    // Nếu nút nhấn đang ở trạng thái LOW (được nhấn xuống) và trạng thái trước đó là HIGH (chưa nhấn)
    if (currentState == LOW && lastButtonState[i] == HIGH) {
      lastButtonState[i] = LOW; // Cập nhật trạng thái nút nhấn
      ledState[i] = !ledState[i]; // Đảo trạng thái LED
      digitalWrite(ledPins[i], ledState[i] ? HIGH : LOW); // Bật hoặc tắt LED

      // Gửi thông tin về trạng thái nút nhấn qua LoRa
      String message = "Button " + String(i + 1) + ": " + (ledState[i] ? "1" : "0");
      sendDataToLoRa(message); // Gửi dữ liệu qua LoRa

    } else if (currentState == HIGH) {
      lastButtonState[i] = HIGH; // Cập nhật trạng thái nút nhấn khi không được nhấn
    }
  }
}

// Hàm nhận dữ liệu từ LoRa và tách giá trị nhiệt độ, độ ẩm
void receiveDataFromLoRa() {
  if (Serial2.available() > 0) {
    String input = Serial2.readString(); // Đọc dữ liệu từ LoRa
    Serial.print("Nhận dữ liệu từ LoRa: "); 
    Serial.println(input); // In dữ liệu nhận được

    // Tách giá trị nhiệt độ và độ ẩm
    int tempIndex = input.indexOf("Temp:") + 6; // Vị trí bắt đầu của giá trị nhiệt độ
    int humIndex = input.indexOf(", Hum:"); // Vị trí của dấu phẩy trước độ ẩm

    if (tempIndex > 0 && humIndex > tempIndex) {
      String tempValue = input.substring(tempIndex, humIndex); // Giá trị nhiệt độ
      String humValue = input.substring(humIndex + 6, humIndex + 11); // Giá trị độ ẩm

      // Loại bỏ khoảng trắng thừa
      tempValue.trim();
      humValue.trim();

      // Chỉ gửi giá trị lên MQTT nếu chúng không rỗng
      if (!tempValue.isEmpty() && !humValue.isEmpty()) {
        sendDataToMQTT(tempValue, humValue); // Gọi hàm gửi dữ liệu lên MQTT
      }
    }
  }
}

// Hàm gửi dữ liệu lên MQTT
void sendDataToMQTT(String temperature, String humidity) {
  client.publish("esp32/temperature", temperature.c_str());
  client.publish("esp32/humidity", humidity.c_str());

  Serial.print("Gửi lên MQTT - Nhiệt độ: ");
  Serial.println(temperature);
  Serial.print("Gửi lên MQTT - Độ ẩm: ");
  Serial.println(humidity);
}

// Hàm gửi dữ liệu qua LoRa
void sendDataToLoRa(String data) {
  Serial2.println(data); // Gửi chuỗi dữ liệu qua Serial2 tới LoRa
  Serial.print("Gửi dữ liệu qua LoRa: ");
  Serial.println(data); // In dữ liệu được gửi để kiểm tra
}
