#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>
#include <DHT.h>
#include <IRremote.h>

const char DEVICE_LOGIN_NAME[]  = "681a29b5-a6e8-47c2-a8e6-68040861f2e8"; //Enter DEVICE ID

const char SSID[]               = "Blue & Black";    //Enter WiFi SSID (name)
const char PASS[]               = "khongcomang";    //Enter WiFi password
const char DEVICE_KEY[]         = "2?qr8Sv4yKltnrLPweTEzUObV";    //Enter Secret device password (Secret Key)

//#define DHTPIN              4 //D4  pin connected with DHT
//#define IR_RECV_PIN         35 //D35 pin connected with IR Receiver IC
#define RXD2 16  // RX pin cho Serial2
#define TXD2 17  // TX pin cho Serial2
// define the GPIO connected with Relays and switches
#define RelayPin1 23  //D23
#define RelayPin2 19  //D19
#define RelayPin3 18  //D18
#define RelayPin4 5  //D5

#define SwitchPin1 13  //D13
#define SwitchPin2 12  //D12
#define SwitchPin3 14  //D14
#define SwitchPin4 27  //D27

//#define wifiLed    2   //D2

// Uncomment whatever type you're using!
//#define DHTTYPE DHT11     // DHT 11
//#define DHTTYPE DHT22   // DHT 22, AM2302, AM2321
//#define DHTTYPE DHT21   // DHT 21, AM2301


//DHT dht(DHTPIN, DHTTYPE);
//IRrecv irrecv(IR_RECV_PIN);
//decode_results results;

int toggleState_1 = 0; //Define integer to remember the toggle state for relay 1
int toggleState_2 = 0; //Define integer to remember the toggle state for relay 2
int toggleState_3 = 0; //Define integer to remember the toggle state for relay 3
int toggleState_4 = 0; //Define integer to remember the toggle state for relay 4

// Switch State
bool SwitchState_1 = LOW;
bool SwitchState_2 = LOW;
bool SwitchState_3 = LOW;
bool SwitchState_4 = LOW;

//float temperature1 = 0;
//float humidity1   = 0;
int   reconnectFlag = 0;

void onLight1Change();
void onLight2Change();
void onLight3Change();
void onLight4Change();

CloudSwitch den1;
CloudSwitch den2;
CloudSwitch den3;
CloudSwitch den4;
CloudTemperatureSensor temperature;
CloudRelativeHumidity humidity;

void initProperties(){

  ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
  ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
  ArduinoCloud.addProperty(den1, READWRITE, ON_CHANGE, onLight1Change);
  ArduinoCloud.addProperty(den2, READWRITE, ON_CHANGE, onLight2Change);
  ArduinoCloud.addProperty(den3, READWRITE, ON_CHANGE, onLight3Change);
  ArduinoCloud.addProperty(den4, READWRITE, ON_CHANGE, onLight4Change);
  ArduinoCloud.addProperty(temperature, READ, 8 * SECONDS, NULL); //Update temperature value after every 8 seconds
  ArduinoCloud.addProperty(humidity, READ, 8 * SECONDS, NULL); 
}

WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);


/*void readSensor(){
     
  float h = dht.readHumidity();
  float t = dht.readTemperature(); // or dht.readTemperature(true) for Fahrenheit
  
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }
  else {
    humidity1 = h;
    temperature = t;
   // Serial.println(tempareture);
  }  
}
*/
//void sendSensor()
//{
 // readSensor();
//}

/*void ir_remote_control(){
  if (irrecv.decode(&results)) {
    
      switch(results.value){
          case 0x80BF49B6:  relayOnOff(1); den1 = toggleState_1; break; //update the HEX-code
          case 0x80BFC936:  relayOnOff(2); den2 = toggleState_2; break; //update the HEX-code
          case 0x80BF33CC:  relayOnOff(3); den3 = toggleState_3; break; //update the HEX-code
          case 0x80BF718E:  relayOnOff(4); den4 = toggleState_4; break; //update the HEX-code
          default : break;         
        }   
        //Serial.println(results.value, HEX);    
        irrecv.resume();   
  } 
} */

/*
void relayOnOff(int relay) {

  switch (relay) {
    case 1:
      if (toggleState_1 == 0) {
        digitalWrite(RelayPin1, LOW); // turn on relay 1
        toggleState_1 = 1;
        Serial.println("Device1 ON");
        String dataToSend = "LED1:" + String(toggleState_1); // Chuyển đổi trạng thái thành chuỗi
        sendDataToLoRa(dataToSend); // Gọi hàm để gửi dữ liệu
      }
      else {
        digitalWrite(RelayPin1, HIGH); // turn off relay 1
        toggleState_1 = 0;
        Serial.println("Device1 OFF");
        String dataToSend = "LED1:" + String(toggleState_1); // Chuyển đổi trạng thái thành chuỗi
        sendDataToLoRa(dataToSend); // Gọi hàm để gửi dữ liệu
      }
      delay(100);
      break;
    case 2:
      if (toggleState_2 == 0) {
        digitalWrite(RelayPin2, LOW); // turn on relay 2
        toggleState_2 = 1;
        Serial.println("Device2 ON");
      }
      else {
        digitalWrite(RelayPin2, HIGH); // turn off relay 2
        toggleState_2 = 0;
        Serial.println("Device2 OFF");
      }
      delay(100);
      break;
    case 3:
      if (toggleState_3 == 0) {
        digitalWrite(RelayPin3, LOW); // turn on relay 3
        toggleState_3 = 1;
        Serial.println("Device3 ON");
      } else {
        digitalWrite(RelayPin3, HIGH); // turn off relay 3
        toggleState_3 = 0;
        Serial.println("Device3 OFF");
      }
      delay(100);
      break;
    case 4:
      if (toggleState_4 == 0) {
        digitalWrite(RelayPin4, LOW); // turn on relay 4
        toggleState_4 = 1;
        Serial.println("Device4 ON");
      }
      else {
        digitalWrite(RelayPin4, HIGH); // turn off relay 4
        toggleState_4 = 0;
        Serial.println("Device4 OFF");
      }
      delay(100);
      break;
    default : break;
  }
}
*/
void manual_control()
{
  if (digitalRead(SwitchPin1) == LOW && SwitchState_1 == LOW) {
    digitalWrite(RelayPin1, LOW);
    toggleState_1 = 1;
    SwitchState_1 = HIGH;
    den1 = toggleState_1;
    Serial.println("Switch-1 on");
    //Gửi dữ liệu qua lora
    String dataToSend = "LED1:" + String(toggleState_1); // Chuyển đổi trạng thái thành chuỗi
    sendDataToLoRa(dataToSend); // Gọi hàm để gửi dữ liệu
  }
  if (digitalRead(SwitchPin1) == HIGH && SwitchState_1 == HIGH) {
    digitalWrite(RelayPin1, HIGH);
    toggleState_1 = 0;
    SwitchState_1 = LOW;
    den1 = toggleState_1;
    Serial.println("Switch-1 off");
    String dataToSend = "LED1:" + String(toggleState_1); // Chuyển đổi trạng thái thành chuỗi
    sendDataToLoRa(dataToSend); // Gọi hàm để gửi dữ liệu
  }
  if (digitalRead(SwitchPin2) == LOW && SwitchState_2 == LOW) {
    digitalWrite(RelayPin2, LOW);
    toggleState_2 = 1;
    SwitchState_2 = HIGH;
    den2 = toggleState_2;
    Serial.println("Switch-2 on");
  }
  if (digitalRead(SwitchPin2) == HIGH && SwitchState_2 == HIGH) {
    digitalWrite(RelayPin2, HIGH);
    toggleState_2 = 0;
    SwitchState_2 = LOW;
    den2 = toggleState_2;
    Serial.println("Switch-2 off");
  }
  if (digitalRead(SwitchPin3) == LOW && SwitchState_3 == LOW) {
    digitalWrite(RelayPin3, LOW);
    toggleState_3 = 1;
    SwitchState_3 = HIGH;
    den3 = toggleState_3;
    Serial.println("Switch-3 on");
  }
  if (digitalRead(SwitchPin3) == HIGH && SwitchState_3 == HIGH) {
    digitalWrite(RelayPin3, HIGH);
    toggleState_3 = 0;
    SwitchState_3 = LOW;
    den3 = toggleState_3;
    Serial.println("Switch-3 off");
  }
  if (digitalRead(SwitchPin4) == LOW && SwitchState_4 == LOW) {
    digitalWrite(RelayPin4, LOW);
    toggleState_4 = 1;
    SwitchState_4 = HIGH;
    den4 = toggleState_4;
    Serial.println("Switch-4 on");
  }
  if (digitalRead(SwitchPin4) == HIGH && SwitchState_4 == HIGH) {
    digitalWrite(RelayPin4, HIGH);
    toggleState_4 = 0;
    SwitchState_4 = LOW;
    den4 = toggleState_4;
    Serial.println("Switch-4 off");
  }
}  

void doThisOnConnect(){
  /* add your custom code here */
  Serial.println("Board successfully connected to Arduino IoT Cloud");
 // digitalWrite(wifiLed, HIGH); //Turn off WiFi LED
}
void doThisOnSync(){
  /* add your custom code here */
  Serial.println("Thing Properties synchronised");
}

void doThisOnDisconnect(){
  /* add your custom code here */
  Serial.println("Board disconnected from Arduino IoT Cloud");
 // digitalWrite(wifiLed, LOW); //Turn off WiFi LED
}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2); // Khởi tạo Serial2 cho LoRa

  delay(1500);

  // Defined in thingProperties.h
  initProperties();
  //dht.begin();
 // irrecv.enableIRIn(); // Start the receiver
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::CONNECT, doThisOnConnect);
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::SYNC, doThisOnSync);
  ArduinoCloud.addCallback(ArduinoIoTCloudEvent::DISCONNECT, doThisOnDisconnect);

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  pinMode(RelayPin1, OUTPUT);
  pinMode(RelayPin2, OUTPUT);
  pinMode(RelayPin3, OUTPUT);
  pinMode(RelayPin4, OUTPUT);

 // pinMode(wifiLed, OUTPUT);

  pinMode(SwitchPin1, INPUT_PULLUP);
  pinMode(SwitchPin2, INPUT_PULLUP);
  pinMode(SwitchPin3, INPUT_PULLUP);
  pinMode(SwitchPin4, INPUT_PULLUP);

  //During Starting all Relays should TURN OFF
  digitalWrite(RelayPin1, HIGH);
  digitalWrite(RelayPin2, HIGH);
  digitalWrite(RelayPin3, HIGH);
  digitalWrite(RelayPin4, HIGH);
}

void loop() {

  ArduinoCloud.update();
  
  manual_control();     //Manual Control
 // ir_remote_control();  //IR Remote Control
 // sendSensor();         //Get Sensor Data
  receiveDataFromLoRa();
}

void onLight1Change() {
  //Control the device
  if (den1 == 1)
  {
    digitalWrite(RelayPin1, LOW);
    Serial.println("Device1 ON");
    toggleState_1 = 1;
    String dataToSend = "LED1:" + String(toggleState_1); // Chuyển đổi trạng thái thành chuỗi
    sendDataToLoRa(dataToSend); // Gọi hàm để gửi dữ liệu
  }
  else
  {
    digitalWrite(RelayPin1, HIGH);
    Serial.println("Device1 OFF");
    toggleState_1 = 0;
    String dataToSend = "LED1:" + String(toggleState_1); // Chuyển đổi trạng thái thành chuỗi
    sendDataToLoRa(dataToSend); // Gọi hàm để gửi dữ liệu
  }
}

void onLight2Change() {
  if (den2 == 1)
  {
    digitalWrite(RelayPin2, LOW);
    Serial.println("Device2 ON");
    toggleState_2 = 1;
  }
  else
  {
    digitalWrite(RelayPin2, HIGH);
    Serial.println("Device2 OFF");
    toggleState_2 = 0;
  }
}

void onLight3Change() {
  if (den3 == 1)
  {
    digitalWrite(RelayPin3, LOW);
    Serial.println("Device3 ON");
    toggleState_3 = 1;
  }
  else
  {
    digitalWrite(RelayPin3, HIGH);
    Serial.println("Device3 OFF");
    toggleState_3 = 0;
  }
}

void onLight4Change() {
  if (den4 == 1)
  {
    digitalWrite(RelayPin4, LOW);
    Serial.println("Device4 ON");
    toggleState_4 = 1;
  }
  else
  {
    digitalWrite(RelayPin4, HIGH);
    Serial.println("Device4 OFF");
    toggleState_4 = 0;
  }
}

void receiveDataFromLoRa() {
  if (Serial2.available() > 0) {
    String input = Serial2.readString(); // Đọc dữ liệu từ LoRa
    Serial.print("Nhận dữ liệu từ LoRa: "); 
    Serial.println(input); // In dữ liệu nhận được

    // Tách giá trị nhiệt độ và độ ẩm
    int tempIndex = input.indexOf("Temp:") + 6; // Vị trí bắt đầu của giá trị nhiệt độ
    int humIndex = input.indexOf(", Hum:"); // Vị trí của dấu phẩy trước độ ẩm

    if (tempIndex > 0 && humIndex > tempIndex) {
      String tempValue = input.substring(tempIndex, humIndex); // Giá trị nhiệt độ
      String humValue = input.substring(humIndex + 6, humIndex + 11); // Giá trị độ ẩm

      // Loại bỏ khoảng trắng thừa
      tempValue.trim();
      humValue.trim();

      // In nhiệt độ và độ ẩm lên Serial Monitor
      Serial.print("Nhiệt độ: ");
      Serial.println(tempValue);
      temperature = tempValue.toInt();
      Serial.print("Độ ẩm: ");
      Serial.println(humValue);
      humidity = humValue.toInt();
    }
  }
}

void sendDataToLoRa(String data) {
  Serial2.println(data); // Gửi chuỗi dữ liệu qua Serial2 tới LoRa
  Serial.print("Gửi dữ liệu qua LoRa: ");
  Serial.println(data); // In dữ liệu được gửi để kiểm tra
}