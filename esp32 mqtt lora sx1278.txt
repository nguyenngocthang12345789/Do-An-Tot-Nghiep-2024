#include <WiFi.h>
#include <PubSubClient.h>

#define M0 12
#define M1 13
#define RXD2 16  // RX pin cho Serial2
#define TXD2 17  // TX pin cho Serial2

const char* ssid = "Blue & Black";
const char* password = "khongcomang";
const char* mqtt_server = "192.168.1.5";

WiFiClient espClient;
PubSubClient client(espClient);

// Hàm callback nhận dữ liệu từ MQTT
void callback(char* topic, byte* payload, unsigned int length) {
  String message = "";
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  
  // In ra màn hình topic và tin nhắn nhận được
  Serial.print("Nhận dữ liệu từ topic: ");
  Serial.println(topic);
  Serial.print("Dữ liệu: ");
  Serial.println(message);
 if (message == "ON") {
    sendDataToLoRa("LED1:1"); // Gọi hàm để gửi lệnh bật LED
  } 
  else if (message == "OFF") {
    sendDataToLoRa("LED1:0"); // Gọi hàm để gửi lệnh tắt LED
  } else {
    Serial.println("Lệnh không hợp lệ!");
  }
}

void setup() {
  Serial.begin(9600);
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2); // Khởi tạo Serial2 cho LoRa

  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);  // Đăng ký hàm callback
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Đang kết nối với ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("Đã kết nối Wi-Fi");
  Serial.println("Địa chỉ IP: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Đang cố gắng kết nối lại MQTT...");
    if (client.connect("ESP32Client")) {
      Serial.println("đã kết nối");
      // Đăng ký các topic để nhận tin nhắn
      client.subscribe("esp32/output");
    } else {
      Serial.print("thất bại, rc=");
      Serial.print(client.state());
      Serial.println(" thử lại sau 5 giây");
      delay(5000);
    }
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();  // Kiểm tra và nhận tin nhắn từ MQTT

  // Nhận dữ liệu từ LoRa
  receiveDataFromLoRa();

  delay(500); // Đợi một thời gian trước khi đọc lại
}

// Hàm nhận dữ liệu từ LoRa và tách giá trị nhiệt độ, độ ẩm
void receiveDataFromLoRa() {
  if (Serial2.available() > 0) {
    String input = Serial2.readString(); // Đọc dữ liệu từ LoRa
    Serial.print("Nhận dữ liệu từ LoRa: "); 
    Serial.println(input); // In dữ liệu nhận được

    // Tách giá trị nhiệt độ và độ ẩm
    int tempIndex = input.indexOf("Temp:") + 6; // Vị trí bắt đầu của giá trị nhiệt độ
    int humIndex = input.indexOf(", Hum:"); // Vị trí của dấu phẩy trước độ ẩm

    if (tempIndex > 0 && humIndex > tempIndex) {
      String tempValue = input.substring(tempIndex, humIndex); // Giá trị nhiệt độ
      String humValue = input.substring(humIndex + 6, humIndex + 11); // Giá trị độ ẩm

      // Loại bỏ khoảng trắng thừa
      tempValue.trim();
      humValue.trim();

      // Chỉ gửi giá trị lên MQTT nếu chúng không rỗng
      if (!tempValue.isEmpty() && !humValue.isEmpty()) {
        sendDataToMQTT(tempValue, humValue); // Gọi hàm gửi dữ liệu lên MQTT
      }
    }
  }
}

// Hàm gửi dữ liệu lên MQTT
void sendDataToMQTT(String temperature, String humidity) {
  client.publish("esp32/temperature", temperature.c_str());
  client.publish("esp32/humidity", humidity.c_str());
  String latitudeStr = String(20.994557, 6);  // Lưu giá trị với 6 chữ số thập phân
  String longitudeStr = String(105.855927, 6);  // Lưu giá trị với 6 chữ số thập phân

  client.publish("esp32/Latitude", latitudeStr.c_str());  // vĩ độ
  client.publish("esp32/Longitude", longitudeStr.c_str());  // kinh độ

  Serial.print("Gửi lên MQTT - Nhiệt độ: ");
  Serial.println(temperature);
  Serial.print("Gửi lên MQTT - Độ ẩm: ");
  Serial.println(humidity);
}

// Hàm gửi dữ liệu qua LoRa
void sendDataToLoRa(String data) {
  Serial2.println(data); // Gửi chuỗi dữ liệu qua Serial2 tới LoRa
  Serial.print("Gửi dữ liệu qua LoRa: ");
  Serial.println(data); // In dữ liệu được gửi để kiểm tra
}
